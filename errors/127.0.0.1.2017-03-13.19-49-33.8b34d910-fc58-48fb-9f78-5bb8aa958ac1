(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Table' object has no attribute 'keywords'"
p3
sS'layer'
p4
S'/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\n@auth.requires_membership("Revisor")\ndef revised():\n    """\n    """\n    reviews = None\n\n    selectable = lambda ids: db(db.resource.id.belongs(ids)).delete()\n\n    query = (db.resource.category.belongs(auth.user.categories_review))\n    left = (db.resource.on((db.resource.state == db.state.id) & (db.state.name == "Revici\xc3\xb3n")))\n\n    fields = [db.resource.id, db.resource.title,  db.resource.language, db.resource.category, db.resource.state, db.resource.year, db.resource.keywords]\n\n    grid = SQLFORM.grid(query, left=left, selectable=selectable, fields=fields, orderby=~db.resource.id, create=False, editable=False, deletable=False)\n\n    heading=grid.elements(\'th\')\n    if heading:\n        heading[0].append(INPUT(_type=\'checkbox\', _onclick="$(\'input[type=checkbox]\').each(function(k){$(this).attr(\'checked\', \'checked\');});"))\n\n    response.title = T("Para Revisar") + response.title\n    response.flash = T("Para Revisar")\n\n    if ("view" in request.args):\n        reviews = db((db.review.id > 0) & (db.review.resource == request.args(-1))).select(orderby=~db.review.created_on)\n\n    return dict(grid=grid, reviews=reviews)\n\n@auth.requires_login()\ndef my_briefcase():\n    """\n    Descargar todos los recursos que son de mi inter\xc3\xa9s (a los que le di mi voto) en formato .zip\n    """\n    editable = False\n\n    selectable = lambda ids: __resource_quit(ids)\n\n    if (auth.has_membership(\'Administrador\') or auth.has_membership(\'Revisor\')):\n        editable = deletable = True\n\n    query = db.resource.votes_user.contains(auth.user.id, all=True)\n    left = db.resource.on((db.resource.state == db.state.id) & (db.state.name == "Publicado"))\n    fields = [db.resource.id, db.resource.resource, db.resource.title,  db.resource.language, db.resource.category, db.resource.rtype, db.resource.year]\n\n    grid = SQLFORM.grid(query, left=left, selectable=selectable, fields=fields, orderby=~db.resource.id, create=False, deletable=deletable, editable=editable, links_in_grid=False)\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="$(\'input[type=checkbox]\').each(function(k){$(this).attr(\'checked\', \'checked\');});"))\n\n    response.title = T("My Briefcase") + response.title\n    response.flash = T("My Briefcase")\n\n    return dict(grid=grid)\n\ndef __resource_quit(ids):\n    """\n    Resource quit of the my briefcase\n    """\n    for id in ids:\n        resource = db.resource(id)\n        votes_user = resource.votes_user.remove(auth.user.id)\n        if votes_user:\n            resource.update_record(votes_user = votes_user)\n        else:\n            resource.update_record(votes_user = [])\n    return True\n\n@auth.requires_login()\ndef multiple_downloads():\n    """\n    Creating zip for multiple download\n    """\n    import app_tools\n    import zipfile\n    from cStringIO import StringIO\n    out = StringIO()\n    files = zipfile.ZipFile(out, mode=\'w\')\n\n    for register in db((db.resource.votes_user.contains(auth.user.id, all=True)) & (db.resource.state == db.state.id) & (db.state.name == "Publicado")).select(db.resource.category, db.resource.title, db.resource.mime_type, db.resource.resource):\n        fullpath = app_tools.retrieve_file_properties(register.resource)\n        if register.mime_type == "epub+zip":\n            files.write(fullpath, register.category.name+"/"+register.title+\'.epub\')\n        else:\n            files.write(fullpath, register.category.name+"/"+register.title+\'.\'+register.mime_type)\n\n    files.close()\n    response.headers[\'Content-Type\'] = \'application/zip\'\n    response.headers[\'Content-Disposition\'] = CAT(\'attachment=True; filename=\', T(\'my_briefcase\'), \'.zip\')\n    out.seek(0)\n\n    return response.stream(out, request=request)\n\n@auth.requires_login()\ndef edites():\n    """\n    Grid to edit resource in edition or rechazed state\n    """\n\n    links=[]\n\n    if "edit" in request.args:\n\n        links.append({\'header\': T(\'Extract\'), \'body\': lambda row: A(XML(\'<i class="glyphicon glyphicon-plus"></i> \'), _class="btn btn-info btn-menu", _href=URL(args=request.args, vars=dict(option="metadata"), user_signature=True, hash_vars=False),**{\'_data-toggle\': "tooltip", \'_title\': T("Extract metadata file"), \'_data-placement\': "top"})})\n\n        links.append({\'header\': T(\'Take coverpage\'), \'body\': lambda row: A(XML(\'<i class="glyphicon glyphicon-camera"></i> \'), _class="btn btn-info btn-menu", _href=URL(args=request.args, vars=dict(option="coverpage"), user_signature=True, hash_vars=False), **{\'_data-toggle\': "tooltip", \'_title\': T("Take coverpage image"), \'_data-placement\': "top"})})\n\n        if request.vars.option:\n            __extract(db.resource(request.args[-1]), request.vars.option)\n\n    selectable = lambda ids: db(db.resource.id.belongs(ids)).delete()\n\n    query = (db.resource.created_by == auth.user.id)\n    left = (db.resource.on((db.resource.state == db.state.id) & ((db.state.name == "Edici\xc3\xb3n") | (db.state.name == "Rechazado"))))\n    fields = [db.resource.id, db.resource.resource, db.resource.title,  db.resource.language, db.resource.category, db.resource.rtype, db.resource.year]\n\n    grid = SQLFORM.grid(query, left=left, selectable=selectable, fields=fields, links=links, orderby=~db.resource.id, create=False, links_in_grid=False)\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="$(\'input[type=checkbox]\').each(function(k){$(this).attr(\'checked\', \'checked\');});"))\n\n    response.title = T("Editar") + response.title\n\n    return dict(grid=grid)\n\ndef __extract(resource, option):\n    \'\'\'\n    Funci\xc3\xb3n auxiliar que permite extraer los metadatos o extraer imagen del cover de un recurso en edici\xc3\xb3n\n    \'\'\'\n\n    import app_resource\n\n    if  option == "coverpage":\n        try:\n            classResource = app_resource.resourceMetadata(resource.resource)\n            resource.update_record(**classResource.coverpage())\n            response.flash = T("Take image")\n        except Exception, e:\n            response.flash = T("Failed to take image")\n    elif option == "metadata":\n        try:\n            classResource = app_resource.resourceMetadata(resource.resource)\n            resource.update_record(**classResource.getMetadata())\n            response.flash = T("Extract metadata")\n        except Exception, e:\n            response.flash = T("Failed to extract metadata")\n    else:\n        response.flash = T("Error option not found")\n\n@auth.requires_membership("Revisor")\ndef table():\n    """\n    Administrate tables\n    """\n    table = request.args(0) or \'publisher\'\n    if not table in db.tables(): grid=None\n\n    selectable = lambda ids: db(db[table].id.belongs(ids)).delete()\n\n    grid = SQLFORM.smartgrid(db[table], args=request.args[:1], linked_tables=[], selectable=selectable)\n\n    heading=grid.elements(\'th\')\n    if heading:\n        heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    response.flash = T(table.replace("_", " "))\n\n    return dict(grid=grid)\n\ndef is_public():\n    """\n    Validate that is public resource\n    """\n    resource = db((db.resource.id == request.args[-1]) & (db.resource.state == 3)).isempty()\n    if resource:\n        return False\n    return True\n\ndef add_vote():\n    """\n    Add vote of auth user\n    """\n    resource = db.resource(request.args(0))\n\n    if resource:\n        votes_user = resource.votes_user\n        form = FORM(INPUT(_type=\'submit\'))\n\n        if form.validate():\n            if auth.user.id in resource.votes_user:\n                votes_user.remove(auth.user.id)\n                response.flash = T("Remove star")\n            else:\n                votes_user.append(auth.user.id)\n                response.flash = T("Give star")\n            resource.update_record(votes_user=resource.votes_user, modified_on=resource.modified_on)\n\n        return dict(form=form, vote_by_my=(auth.user.id in resource.votes_user), votes = len(resource.votes_user))\n    else:\n        return dict(form=None, vote_by_my=None, votes=None)\n\ndef vote():\n    """\n    Gets votes\n    """\n    resource = db.resource(request.args(0))\n    if resource:\n        votes = len(resource.votes_user)\n    else:\n        votes = None\n    return dict(votes=votes)\n\ndef add_comment():\n    """\n    Add comment to resource\n    """\n\n    form=SQLFORM(db.comment, submit_button=T(\'Comment\'))\n    if form.validate():\n        db.comment.insert(body=request.vars.body, resource=request.args(0))\n        response.flash = T(\'Add comment\')\n    return dict(form=form, comments=db(db.comment.resource == request.args(0)).select())\n\ndef comment():\n    """\n    Get comments\n    """\n    return dict(comments=db(db.comment.resource == request.args(0)).select())\n\ndef view():\n    """\n    View resource by id\n    """\n    resource = db.resource(request.args(0))\n\n    if resource:\n        if resource.state != 3:\n            return dict(resource = None)\n\n        resource.update_record(visits = int(resource.visits)+1, modified_on=resource.modified_on)\n\n    response.title = CAT(T(\'View\').upper(), " | ", website.intitution)\n\n    return dict(resource=resource)\n\n@cache.action()\ndef downloads():\n    """\n    Updating downloads of resource\n    """\n    resource = db.resource(request.args(0))\n    if resource:\n        resource.update_record(downloads = resource.downloads + 1, modified_on=resource.modified_on)\n    return response.download(request, db)\n\n\n@auth.requires_membership("Administrador")\ndef admin_table():\n    """\n    Administrate tables\n    """\n    table = request.args(0) or \'auth_user\'\n    if not table in db.tables(): grid=None\n\n    selectable = lambda ids: db(db[table].id.belongs(ids)).delete()\n\n    grid = SQLFORM.smartgrid(db[table], args=request.args[:1], linked_tables=[], selectable=selectable)\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    response.title = T(table.replace("_", " ").capitalize()) + response.title\n    response.flash = T(table.replace("_", " ").capitalize())\n\n    return dict(grid=grid)\n\n@auth.requires_membership("Administrador")\ndef upload_multiple():\n    """\n    Function for upload multiples resources\n    """\n\n    form = SQLFORM(db.resource, fields=[\'rtype\', "category", \'resource\'], labels={\'resource\': T(\'Recurso\'), \'rtype\': T(\'Type\'), \'category\': T(\'Category\')}, submit_button=T(\'Upload all\'))\n\n    response.title = T("Upload Multiple") + response.title\n    response.flash = T("Upload multiple files")\n    return dict(form=form)\n\n@auth.requires_membership("Administrador")\ndef admin():\n    """\n    Administrate resources\n    """\n\n    links=[]\n    selectable=orderby=fields=None\n\n    if not "comment.resource" in request.args:\n\n        response.flash = T("Administrate resources")\n\n        if "edit" in request.args:\n            links.append({\'header\': T(\'Extract\'), \'body\': lambda row: A(XML(\'<i class="glyphicon glyphicon-plus"></i> \'), _class="btn btn-info btn-menu", _href=URL(args=request.args, vars=dict(option="metadata"), user_signature=True, hash_vars=False),**{\'_data-toggle\': "tooltip", \'_title\': T("Extract metadata file"), \'_data-placement\': "top"})})\n\n            links.append({\'header\': T(\'Take coverpage\'), \'body\': lambda row: A(XML(\'<i class="glyphicon glyphicon-camera"></i> \'), _class="btn btn-info btn-menu", _href=URL(args=request.args, vars=dict(option="coverpage"), user_signature=True, hash_vars=False), **{\'_data-toggle\': "tooltip", \'_title\': T("Take coverpage image"), \'_data-placement\': "top"})})\n\n            if request.vars.option:\n                __extract(db.resource(request.args[-1]), request.vars.option)\n\n        selectable = lambda ids: db(db.resource.id.belongs(ids)).delete()\n        fields = [db.resource.id, db.resource.resource, db.resource.title, db.resource.publisher, db.resource.rtype, db.resource.category, db.resource.state, db.resource.votes]\n        orderby=~db.resource.id\n        response.title = T("Administrate Resource") + response.title\n\n    else:\n        selectable = lambda ids: db(db.comment.id.belongs(ids)).delete()\n        fields = [db.comment.id, db.comment.body, db.comment.resource]\n        response.title = T("Administrate comments") + response.title\n        response.flash = T("Administrate comments")\n\n    grid = SQLFORM.smartgrid(db.resource, fields=fields, links=links, selectable=selectable, linked_tables=[\'comment\'], links_in_grid=False, ignore_rw=True, orderby=orderby)\n\n    heading=grid.elements(\'th\')\n    if heading:\n        heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    return dict(grid=grid)\n\n@auth.requires_login()\ndef upload_file():\n    """\n    File upload handler for the ajax form of the plugin jquery-file-upload\n    Return the response in JSON required by the plugin\n    """\n    try:\n        import re\n        from gluon.serializers import json\n\n        resource_file = request.vars[\'files[]\']\n        resource_type = re.compile(\'^(\\s|\\.|-|\\w|\xc3\xa1|\xc3\xa9|\xc3\xad|\xc3\xb3|\xc3\xba|\xc3\xb1|\xc3\x81|\xc3\x89|\xc3\x8d|\xc3\x93|\xc3\x9a|\xc3\x91){1,40}\\.(pdf|epub|png)$\')\n        filename = resource_file.filename\n\n        if resource_type.match(filename):\n            # Store file\n            id = db.resource.insert(resource = db.resource.resource.store(resource_file, filename), title=filename)\n            response.flash= CAT(T("I uploaded resource named "), filename)\n            return response.json(json({"name": filename, "success": True}))\n        else:\n            return response.json(json({"name": filename, "success": False, "message": T("Invalid file name")}))\n\n    except Exception, e:\n        response.flash= T("Failed uploading file")\n        return response.json(json({"name": resource_file.filename, "success": False, "message": str(e)}))\n\n@auth.requires_membership("Administrador")\ndef admin_upload_file():\n    """\n    File upload handler for the ajax form of the plugin jquery-file-upload\n    Return the response in JSON required by the plugin\n    """\n    try:\n        import re\n        from gluon.serializers import json\n\n        resource_file = request.vars[\'files[]\']\n        resource_type = re.compile(\'^(\\s|\\.|-|\\w|\xc3\xa1|\xc3\xa9|\xc3\xad|\xc3\xb3|\xc3\xba|\xc3\xb1|\xc3\x81|\xc3\x89|\xc3\x8d|\xc3\x93|\xc3\x9a|\xc3\x91){1,40}\\.(pdf|epub|png)$\')\n        filename = resource_file.filename\n\n        if resource_type.match(filename):\n            # Store file\n            id = db.resource.insert(resource = db.resource.resource.store(request.vars[\'files[]\'], request.vars[\'files[]\'].filename), title=request.vars[\'files[]\'].filename, category=request.vars[\'category\'], rtype=request.vars[\'rtype\'])\n            response.flash= CAT(T("I uploaded resource named"), " ", request.vars[\'files[]\'].filename)\n            return response.json(json({True}))\n        else:\n            response.flash= CAT(T("Error filename"), " ", request.vars[\'files[]\'].filename)\n            return response.json(json({False}))\n    except:\n        response.flash= T("Failed uploading file")\n        return response.json(json({False}))\n\nresponse._vars=response._caller(revised)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py", line 384, in <module>\n  File "/opt/python/web2py/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/python/web2py/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py", line 14, in revised\n    fields = [db.resource.id, db.resource.title,  db.resource.language, db.resource.category, db.resource.state, db.resource.year, db.resource.keywords]\nAttributeError: \'Table\' object has no attribute \'keywords\'\n'
p11
s.