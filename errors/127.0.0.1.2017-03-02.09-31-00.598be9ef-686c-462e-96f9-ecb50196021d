(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'Rechazado'"
p3
sS'layer'
p4
S'/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\n@auth.requires_membership("Administrador")\ndef admin_table():\n    """\n    Administrate tables\n    """\n    table = request.args(0) or \'auth_user\'\n    if not table in db.tables(): grid=None\n\n    selectable = lambda ids: db(db[table].id.belongs(ids)).delete()\n\n    grid = SQLFORM.smartgrid(db[table], args=request.args[:1], linked_tables=[], selectable=selectable, showbuttontext=False, exportclasses=dict(json=False, csv_with_hidden_cols=False, csv=False, xml=False, html=False))\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    response.title = T(table.replace("_", " ").capitalize()) + response.title\n    response.flash = T(table.replace("_", " ").capitalize())\n\n    return dict(grid=grid)\n\n@auth.requires_membership("Administrador")\ndef admin_category():\n    """\n    Administrate categories\n    """\n    selectable = lambda ids: db(db.category.id.belongs(ids)).delete()\n\n    fields = [db.category.id, db.category.name]\n    grid = SQLFORM.smartgrid(db.category, fields=fields, selectable=selectable, linked_tables=[\'category\'], exportclasses=dict(json=False, csv_with_hidden_cols=False, csv=False, xml=False, html=False))\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    response.title = T("Administrate categories") + response.title\n    response.flash = T("Administrate categories")\n    return dict(grid=grid)\n\n@auth.requires_membership("Administrador")\ndef upload_multiple():\n    """\n    Function for upload multiples resources\n    """\n\n    form = SQLFORM(db.resource, fields=[\'rtype\', "category", \'resource\'], labels={\'resource\': T(\'Recurso\'), \'rtype\': T(\'Type\'), \'category\': T(\'Category\')}, submit_button=T(\'Upload all\'))\n\n    response.title = T("Upload Multiple") + response.title\n    response.flash = T("Upload multiple files")\n    return dict(form=form)\n\n@auth.requires_membership("Administrador")\ndef admin():\n    """\n    Administrate resources\n    """\n\n    links=selectable=orderby=fields=None\n\n    if not "comment.resource" in request.args:\n        response.flash = T("Administrate resources")\n\n        if "edit" in request.args:\n\n            links = [{\'header\': T(\'Extract\'), \'body\': lambda row: A(XML(\'<i class="glyphicon glyphicon-plus"></i> \'), _class="btn btn-info", _href=URL(args=request.args, vars=dict(metadata=True), user_signature=True, hash_vars=False),**{\'_data-toggle\': "tooltip", \'_title\': T("Extract metadata file"), \'_data-placement\': "top"})},\n                {\'header\': T(\'Take cover page\'), \'body\': lambda row: A(XML(\'<i class="glyphicon glyphicon-camera"></i> \'), _class="btn btn-info", _href=URL(args=request.args, vars=dict(image=True), user_signature=True, hash_vars=False), **{\'_data-toggle\': "tooltip", \'_title\': T("Take cover page image"), \'_data-placement\': "top"})},\n                ]\n\n            resource = db.resource(request.args[-1])\n\n            import app_resource\n\n            if "image" in request.vars:\n                try:\n                    classResource = app_resource.resourceMetadata(resource.resource)\n                    resource.update_record(**classResource.coverpage())\n                    response.flash = T("Take image")\n                except Exception, e:\n                    response.flash = T("Failed to take image")\n            elif "metadata" in request.vars:\n                try:\n                    classResource = app_resource.resourceMetadata(resource.resource)\n                    resource.update_record(**classResource.getMetadata())\n                    response.flash = T("Extract metadata")\n                except Exception, e:\n                    response.flash = T("Failed to extract metadata")\n\n        selectable = lambda ids: db(db.resource.id.belongs(ids)).delete()\n        fields = [db.resource.id, db.resource.resource, db.resource.title, db.resource.publisher, db.resource.rtype, db.resource.category, db.resource.state]\n        orderby=~db.resource.id\n        response.title = T("Administrate Resource") + response.title\n\n    else:\n        selectable = lambda ids: db(db.comment.id.belongs(ids)).delete()\n        fields = [db.comment.id, db.comment.body, db.comment.resource]\n        response.title = T("Administrate comments") + response.title\n        response.flash = T("Administrate comments")\n\n    grid = SQLFORM.smartgrid(db.resource, fields=fields, links=links, selectable=selectable, linked_tables=[\'comment\'], links_in_grid=False, ignore_rw=True, orderby=orderby, exportclasses=dict(json=False, csv_with_hidden_cols=False, csv=False, xml=False, html=False))\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    return dict(grid=grid)\n\n@auth.requires_login()\ndef upload_file():\n    """\n    File upload handler for the ajax form of the plugin jquery-file-upload\n    Return the response in JSON required by the plugin\n    """\n    try:\n        import re\n        from gluon.serializers import json\n\n        resource_file = request.vars[\'files[]\']\n\n        resource_type = re.compile(\'^(\\s|\\.|-|\\w|\xc3\xa1|\xc3\xa9|\xc3\xad|\xc3\xb3|\xc3\xba|\xc3\xb1|\xc3\x81|\xc3\x89|\xc3\x8d|\xc3\x93|\xc3\x9a|\xc3\x91){1,40}\\.(pdf|epub|png)$\')\n\n        filename = resource_file.filename\n\n        if resource_type.match(filename):\n            # Store file\n            id = db.resource.insert(resource = db.resource.resource.store(resource_file, filename), title=filename)\n\n            response.flash= CAT(T("I uploaded resource named "), filename)\n\n            return response.json(json({"name": filename, "success": True}))\n        else:\n            return response.json(json({"name": filename, "success": False, "message": T("Invalid file name")}))\n\n    except Exception, e:\n        response.flash= T("Failed uploading file")\n        return response.json(json({"name": resource_file.filename, "success": False, "message": str(e)}))\n\n@auth.requires_membership("Administrador")\ndef admin_upload_file():\n    """\n    File upload handler for the ajax form of the plugin jquery-file-upload\n    Return the response in JSON required by the plugin\n    """\n    try:\n        import re\n        from gluon.serializers import json\n\n        resource_file = request.vars[\'files[]\']\n\n        resource_type = re.compile(\'^(\\s|\\.|-|\\w|\xc3\xa1|\xc3\xa9|\xc3\xad|\xc3\xb3|\xc3\xba|\xc3\xb1|\xc3\x81|\xc3\x89|\xc3\x8d|\xc3\x93|\xc3\x9a|\xc3\x91){1,40}\\.(pdf|epub|png)$\')\n\n        filename = resource_file.filename\n\n        if resource_type.match(filename):\n        # Store file\n            id = db.resource.insert(resource = db.resource.resource.store(request.vars[\'files[]\'], request.vars[\'files[]\'].filename), title=request.vars[\'files[]\'].filename, category=request.vars[\'category\'], rtype=request.vars[\'rtype\'])\n\n            response.flash= CAT(T("I uploaded resource named"), " ", request.vars[\'files[]\'].filename)\n            return response.json(json({True}))\n        else:\n            response.flash= CAT(T("Error filename"), " ", request.vars[\'files[]\'].filename)\n            return response.json(json({False}))\n\n    except:\n        response.flash= T("Failed uploading file")\n        return response.json(json({False}))\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\nresponse._vars=response._caller(admin)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py", line 173, in <module>\n  File "/opt/python/web2py/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/python/web2py/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py", line 101, in admin\n    grid = SQLFORM.smartgrid(db.resource, fields=fields, links=links, selectable=selectable, linked_tables=[\'comment\'], links_in_grid=False, ignore_rw=True, orderby=orderby, exportclasses=dict(json=False, csv_with_hidden_cols=False, csv=False, xml=False, html=False))\n  File "/opt/python/web2py/web2py/gluon/sqlhtml.py", line 3102, in smartgrid\n    user_signature=user_signature, **kwargs)\n  File "/opt/python/web2py/web2py/gluon/sqlhtml.py", line 2346, in grid\n    update_form = SQLFORM(table, record, **sqlformargs)\n  File "/opt/python/web2py/web2py/gluon/sqlhtml.py", line 1295, in __init__\n    inp = self.widgets.options.widget(field, default)\n  File "/opt/python/web2py/web2py/gluon/sqlhtml.py", line 313, in widget\n    options = requires[0].options()\n  File "/opt/python/web2py/web2py/gluon/validators.py", line 598, in options\n    self.build_set()\n  File "/opt/python/web2py/web2py/gluon/validators.py", line 584, in build_set\n    records = self.dbset(table).select(*fields, **dd)\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 852, in NE\n    self.expand(second, first.type))\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/opt/python/web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'Rechazado\'\n'
p11
s.