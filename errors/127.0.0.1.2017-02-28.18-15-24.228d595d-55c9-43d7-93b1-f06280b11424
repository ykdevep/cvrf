(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'id'"
p3
sS'layer'
p4
S'/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# intente algo como\n@auth.requires_membership("Administrador")\ndef upload_multiple():\n    """\n    Function for upload multiples resources\n    """\n\n    form = SQLFORM(db.resource, fields=[\'rtype\', "category", \'resource\'], labels={\'resource\': T(\'Recurso\'), \'rtype\': T(\'Type\'), \'category\': T(\'Category\')}, submit_button=T(\'Upload all\'))\n\n    response.flash = T("Upload multiple files")\n    return dict(form=form)\n\n@auth.requires_membership("Administrador")\ndef admin():\n    """\n    Administrate resources\n    """\n\n    links=selectable=orderby=fields=None\n\n    if not "comment.resource" in request.args:\n        response.flash = T("Administrate resources")\n\n        if "edit" in request.args:\n\n            links = [{\'header\': T(\'Extract\'), \'body\': lambda row: A(XML(\'<i class="glyphicon glyphicon-plus"></i> \'), _class="btn btn-info", _href=URL(args=request.args, vars=dict(metadata=True), user_signature=True, hash_vars=False),**{\'_data-toggle\': "tooltip", \'_title\': T("Extract metadata file"), \'_data-placement\': "top"})},\n                {\'header\': T(\'Take cover page\'), \'body\': lambda row: A(XML(\'<i class="glyphicon glyphicon-camera"></i> \'), _class="btn btn-info", _href=URL(args=request.args, vars=dict(image=True), user_signature=True, hash_vars=False), **{\'_data-toggle\': "tooltip", \'_title\': T("Take cover page image"), \'_data-placement\': "top"})},\n                ]\n\n            resource = db.resource(request.args[-1])\n\n            if "image" in request.vars:\n                import app_resource\n                try:\n                    classResource = app_resource.resourceMetadata(resource.resource)\n                    resource.update_record(**classResource.coverpage())\n                    response.flash = T("Take image")\n                except Exception, e:\n                    response.flash = T("Failed to take image")\n            elif "metadata" in request.vars:\n                import app_resource\n                try:\n                    classResource = app_resource.resourceMetadata(resource.resource)\n                    resource.update_record(**classResource.getMetadata())\n                    response.flash = T("Extract metadata")\n                except Exception, e:\n                    response.flash = T("Failed to extract metadata")\n\n        selectable = lambda ids: db(db.resource.id.belongs(ids)).delete()\n        fields = [db.resource.id, db.resource.resource, db.resource.title, db.resource.publisher, db.resource.rtype, db.resource.category, db.resource.state]\n        orderby=~db.resource.id\n\n    else:\n        selectable = lambda ids: db(db.comment.id.belongs(ids)).delete()\n        response.flash = T("Administrate comments")\n        fields = [db.comment.id, db.comment.body, db.comment.resource]\n\n    grid = SQLFORM.smartgrid(db.resource, fields=fields, links=links, selectable=selectable, linked_tables=[\'comment\'], links_in_grid=False, ignore_rw=True, orderby=orderby, exportclasses=dict(json=False, csv_with_hidden_cols=False, csv=False, xml=False, html=False))\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    return dict(grid=grid)\n\nresponse._vars=response._caller(admin)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py", line 67, in <module>\n  File "/opt/python/web2py/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/python/web2py/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/opt/python/web2py/web2py/applications/cvrf/controllers/resource.py", line 59, in admin\n    grid = SQLFORM.smartgrid(db.resource, fields=fields, links=links, selectable=selectable, linked_tables=[\'comment\'], links_in_grid=False, ignore_rw=True, orderby=orderby, exportclasses=dict(json=False, csv_with_hidden_cols=False, csv=False, xml=False, html=False))\n  File "/opt/python/web2py/web2py/gluon/sqlhtml.py", line 3102, in smartgrid\n    user_signature=user_signature, **kwargs)\n  File "/opt/python/web2py/web2py/gluon/sqlhtml.py", line 2303, in grid\n    create_form = SQLFORM(table, **sqlformargs)\n  File "/opt/python/web2py/web2py/gluon/sqlhtml.py", line 1249, in __init__\n    default = default()\n  File "/opt/python/web2py/web2py/applications/cvrf/models/resource/db_resource.py", line 99, in <lambda>\n    db.resource.language.default = lambda : db(db.language).select().first().id or None\nAttributeError: \'NoneType\' object has no attribute \'id\'\n'
p11
s.